import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id 'application'
	id 'java'
	id "com.diffplug.spotless" version "6.25.0"
}

group = 'org.mpybuilder'
version = '1.0-SNAPSHOT'

repositories {
	mavenCentral()
}

processResources {
	// copy the folder as is into the jar-archive,
	// thus making it available as a resource with path 'c-runtime'
	from("c-runtime") {
		into('c-runtime')
	}
}

test {
	useJUnitPlatform()
}

dependencies {
	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
			TestLogEvent.PASSED,
			TestLogEvent.SKIPPED,
			TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
				TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_ERROR,
				TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}

spotless {

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore', '.editorconfig', '*.cff' , '*.md', 'gradlew', 'gradlew.bat'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0').aosp().reflowLongStrings().skipJavadocFormatting()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}
